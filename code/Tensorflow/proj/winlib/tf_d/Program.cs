using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Text;
using System.Diagnostics;
using System.IO;
using Star_csharp;
using System.Net.Sockets;
using System.Net;
using System.Threading;

namespace LibtestDemo
{
    class Program
    {

        [DllImport("DLM.dll", EntryPoint = "TfInit", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TfInit();

        [DllImport("DLM.dll", EntryPoint = "TfTest", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TfTest(StringBuilder Imgpath);
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {

            StarCoreFactory starcore = StarCoreFactory.GetFactory();
            StarServiceClass Service = starcore._InitSimple("test", "123", 0, 0);
            StarSrvGroupClass SrvGroup = (StarSrvGroupClass)Service._Get("_ServiceGroup");
            //--init python raw interface  
            SrvGroup._InitRaw("python35", Service);
            //--load python module  
            SrvGroup._LoadRawModule("python", "", "det1.py", false);
            //--attach object to global python space  
            StarObjectClass obj = Service._ImportRawContext("python", "", false, "");
            // obj._Call("load_models", "");
            //--call python function tt, the return contains two integer, which will be packed into parapkg  

            Stopwatch sw = new Stopwatch();

            sw.Start();
            int res = (int)obj._Call("test", "1.jpg "); 
           Console.WriteLine("ret from python :  " + res);
            sw.Stop();
            long totalTime0 = sw.ElapsedMilliseconds;
            Console.WriteLine("time0 :  " + totalTime0);

            sw.Start();
            int res1 = (int)obj._Call("test", "1.jpg ");
            sw.Stop();
            long totalTime = sw.ElapsedMilliseconds - totalTime0;
            //  Application.EnableVisualStyles();
           
            Console.WriteLine("ret from python :  " + res1);
            Console.WriteLine("time :  " + totalTime);
            /*Program p = new Program();
          
            p.run_exe("I:/DLM_2/x64/Release/DLM.exe");

            Thread.Sleep(20000); //等待初始化20s
            InitServer();
        
            Process[] myprocess = Process.GetProcessesByName("DLM");
            foreach (Process pl in myprocess)
            {
                pl.Kill();
            }*/
            //string img = "src2.jpg"; //目标图像路径
            //string pt = @"1.jpg"; //目标图像路径
            /*    StringBuilder imagepth = new StringBuilder("1.jpg");
                int R = 0;   //结果

                R = TfInit();    

                int R1 = 0;   //结果
                R1 = TfTest(imagepth); //调用检测方法           

                ////MessageBox.Show("V_" + version); //
                MessageBox.Show(R + "&" + R1+ ""); //显示结果
                */
            //Application.SetCompatibleTextRenderingDefault(false);
            //Application.Run(new Form1());
            // server.Close(); 
            //    SrvGroup._ClearService();
            //   starcore._ModuleExit();
        }

        public string run_cmd(string program, string cmd)
        { 
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = program;
            start.Arguments = cmd;
            start.UseShellExecute = false;          // Do not use OS shell
            start.CreateNoWindow = true;            // We don't need new window
            start.RedirectStandardOutput = true;    // Any output, generated by application will be redirected back
            start.RedirectStandardError = true;     // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string result = process.StandardError.ReadToEnd();
                    if (result == null || result == "")
                    {
                        result = reader.ReadToEnd();
                    }
                    return result;
                }
            }
        }

        public void run_exe(string program)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = program;
            start.UseShellExecute = false;          // Do not use OS shell
            start.CreateNoWindow = true;            // We don't need new window
            start.RedirectStandardOutput = true;    // Any output, generated by application will be redirected back
            start.RedirectStandardError = true;     // Any error in standard output will be redirected back (for example exceptions)
            Process process = Process.Start(start);

        }

        public string runPyFunc1()
        {
            string cmd = string.Format("-c \"import sys;sys.path.append('');import det;det.loadmodels())\"");
            return run_cmd("python.exe", cmd);
        }

        //public string runPyFunc2( string filename, string functionname, string parameter)
        //{
        //    string cmd = string.Format("-c \"import sys;sys.path.append('{0}');import {1};print({1}.{2}({3}))\"", path, filename, functionname, parameter);
        //    return run_cmd("python.exe", cmd);
        //}

    //    public static Socket server;

        public static void InitServer()
        {

            //      server = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
            //      server.Bind(new IPEndPoint(IPAddress.Parse("192.168.1.105"), 8000));//绑定端口号和IP
            //       Console.WriteLine("服务端已经开启");
            sendMsg("1.jpg");
            string resault = ReciveMsg();
            Console.WriteLine(resault);
            //sendMsg("done");
            //Thread t2 = new Thread(sendMsg);//开启发送消息线程
            // t2.Start();
            // Thread t = new Thread(ReciveMsg);//开启接收消息线程
            // t.Start();


        }
        /// <summary>
        /// 向特定ip的主机的端口发送数据报
        /// </summary>
        static void sendMsg(string msg)
        {
            Socket servertoclick = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
            EndPoint point = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 8001);
          //  while (true)
            {
               // Console.ReadLine();
                for (int i = 0; i < 100000000; i++) ;
                Console.WriteLine(msg);
                servertoclick.SendTo(Encoding.UTF8.GetBytes(msg), point);
            }


        }
        /// <summary>
        /// 接收发送给本机ip对应端口号的数据报
        /// </summary>
        static string ReciveMsg()
        {
            Socket server = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
            // EndPoint point = new IPEndPoint(IPAddress.Any, 0);
            EndPoint point = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 8000);//用来保存发送方的ip和端口号
            server.Bind(point);
         //   while (true)
            {
         
                byte[] buffer = new byte[1024];
                int length = server.ReceiveFrom(buffer, ref point);//接收数据报
                string message = Encoding.UTF8.GetString(buffer, 0, length);
                Console.WriteLine(point.ToString() + message);
                return message;
            }
        }

    }


}




